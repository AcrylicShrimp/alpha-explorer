#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TextureFormat {
    RI8,
    RGI8,
    RGBI8,
    RGBAI8,
    RI16,
    RGI16,
    RGBI16,
    RGBAI16,
    RI32,
    RGI32,
    RGBI32,
    RGBAI32,
    RU8,
    RGU8,
    RGBU8,
    RGBAU8,
    RU16,
    RGU16,
    RGBU16,
    RGBAU16,
    RU32,
    RGU32,
    RGBU32,
    RGBAU32,
    RF16,
    RGF16,
    RGBF16,
    RGBAF16,
    RF32,
    RGF32,
    RGBF32,
    RGBAF32,
}

impl TextureFormat {
    pub fn component(&self) -> u32 {
        match self {
            TextureFormat::RI8 => 1,
            TextureFormat::RGI8 => 2,
            TextureFormat::RGBI8 => 3,
            TextureFormat::RGBAI8 => 4,
            TextureFormat::RI16 => 1,
            TextureFormat::RGI16 => 2,
            TextureFormat::RGBI16 => 3,
            TextureFormat::RGBAI16 => 4,
            TextureFormat::RI32 => 1,
            TextureFormat::RGI32 => 2,
            TextureFormat::RGBI32 => 3,
            TextureFormat::RGBAI32 => 4,
            TextureFormat::RU8 => 1,
            TextureFormat::RGU8 => 2,
            TextureFormat::RGBU8 => 3,
            TextureFormat::RGBAU8 => 4,
            TextureFormat::RU16 => 1,
            TextureFormat::RGU16 => 2,
            TextureFormat::RGBU16 => 3,
            TextureFormat::RGBAU16 => 4,
            TextureFormat::RU32 => 1,
            TextureFormat::RGU32 => 2,
            TextureFormat::RGBU32 => 3,
            TextureFormat::RGBAU32 => 4,
            TextureFormat::RF16 => 1,
            TextureFormat::RGF16 => 2,
            TextureFormat::RGBF16 => 3,
            TextureFormat::RGBAF16 => 4,
            TextureFormat::RF32 => 1,
            TextureFormat::RGF32 => 2,
            TextureFormat::RGBF32 => 3,
            TextureFormat::RGBAF32 => 4,
        }
    }
}
